#!/bin/bash
#
# init file for unmp-nbi-notify
# Devendra Sharma - 11/25/11
#
# chkconfig: 345 98 06
# description: A Red Hat Linux start/stop script for unmp-nbi-notify daemon.
 
### BEGIN INIT INFO
# Provides:                   unmp-nbi-notify
# Default-Start:              3 5
# Default-Stop:               0 1 2 6
# Short-Description:          UNMP-NBI-Notify
# Description:                A Java daemon for UNMP-NBI-Notify
### END INIT INFO
 
# Set this to the jaco installation
JACO_HOME=/opt/omd/versions/0.48/share/nbi
 
serviceUser="UNMP"										# OS user name for the service
serviceGroup="UNMP"										# OS group name for the service

maxShutdownTime=15										# maximum number of seconds to wait for the daemon to terminate normally

serviceNameLo="unmp-nbi-notify"							# service name with the first letter in lowercase
serviceName="UNMP-NBI-Notify"							# service name
applDir="/omd/daemon/lib/$serviceName"							# home directory of the service application
serviceUserHome="/home/$serviceUser"							# home directory of the service user
serviceLogFile="/omd/daemon/log/$serviceNameLo.log"			# log file for StdOut/StdErr
pidFile="/omd/daemon/tmp/$serviceNameLo.pid"					# name of PID file (PID = process ID number)

jacoCommand="jaco"										# name of the jaco launcher without the path
jacoExe="$JACO_HOME/bin/$jacoCommand"					# file name of the jaco application launcher executable
jacoArgs="-jar $applDir/$serviceName.jar -port 9102 -channels 10 -writeIOR ${JACO_HOME}/tmp/notify.ior -printCorbaloc -printIOR"				# arguments for jaco launcher to trigger Naming Service
jacoCommandLine="$jacoExe $jacoArgs"					# command line to start the Naming service application

jacoCommandLineKeyword="$serviceNameLo"					# a keyword that occurs on the commandline, used to detect an already 
														# running service process and to distinguish it from others
 
# Makes the file $1 writable by the group $serviceGroup.
function makeFileWritable {
   local filename="$1"
   touch $filename || return 1
   chgrp $serviceGroup $filename || return 1
   chmod g+w $filename || return 1
   return 0; }
 
# Returns 0 if the process with PID $1 is running.
function checkProcessIsRunning {
   local pid="$1"
   if [ -z "$pid" -o "$pid" == " " ]; then return 1; fi
   if [ ! -e /proc/$pid ]; then return 1; fi
   return 0; }
 
# Returns 0 if the process with PID $1 is our Java service process.
function checkProcessIsOurService {
   local pid="$1"
   if [ "$(ps -p $pid --no-headers -o comm)" != "$jacoCommand" ]; then return 1; fi
   grep -q --binary -F "$jacoCommandLineKeyword" /proc/$pid/cmdline
   if [ $? -ne 0 ]; then return 1; fi
   return 0; }
 
# Returns 0 when the service is running and sets the variable $pid to the PID.
function getServicePID {
   if [ ! -f $pidFile ]; then return 1; fi
   pid="$(<$pidFile)"
   checkProcessIsRunning $pid || return 1
### This has been removed for now ###
#  checkProcessIsOurService $pid || return 1
   return 0; }
 
function startServiceProcess {
   cd $applDir || return 1
   rm -f $pidFile
   makeFileWritable $pidFile || return 1
   makeFileWritable $serviceLogFile || return 1
   cmd="nohup $jacoCommandLine >>$serviceLogFile 2>&1 & echo \$! >$pidFile"
   #su -m $serviceUser -s $SHELL -c "$cmd" || return 1
   sudo -u $serviceUser /bin/bash -c "$cmd" || return 1
   sleep 0.1
   pid="$(<$pidFile)"
   if checkProcessIsRunning $pid; then :; else
      echo -ne "\n$serviceName start failed, see logfile."
      return 1
   fi
   return 0; }
 
function stopServiceProcess {
   kill $pid || return 1
   for ((i=0; i<maxShutdownTime*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo -e "\n$serviceName did not terminate within $maxShutdownTime seconds, sending SIGKILL..."
   kill -s KILL $pid || return 1
   local killWaitTime=15
   for ((i=0; i<killWaitTime*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         #rm -f $pidFile
         cat /dev/null >$pidFile
         #rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo "Error: $serviceName could not be stopped within $maxShutdownTime+$killWaitTime seconds!"
   return 1; }
 
function startService {
   getServicePID
   if [ $? -eq 0 ]; then echo -n "$serviceName is already running"; RETVAL=0; return 0; fi
   echo -n "Starting $serviceName   "
   startServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "started PID=$pid"
   RETVAL=0
   return 0; }
 
function stopService {
   getServicePID
   if [ $? -ne 0 ]; then echo -n "$serviceName is not running"; RETVAL=0; echo ""; return 0; fi
   echo -n "Stopping $serviceName   "
   stopServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "stopped PID=$pid"
   RETVAL=0
   return 0; }
 
function checkServiceStatus {
   echo -n "Checking for $serviceName:   "
   if getServicePID; then
    echo "running PID=$pid"
    RETVAL=0
   else
    echo "stopped"
    RETVAL=3
   fi
   return 0; }
 
function main {
   RETVAL=0
   case "$1" in
      start)                                               # starts the Java program as a Linux service
         startService
         ;;
      stop)                                                # stops the Java program service
         stopService
         ;;
      restart)                                             # stops and restarts the service
         stopService && startService
         ;;
      status)                                              # displays the service status
         checkServiceStatus
         ;;
      *)
         echo "Usage: $0 {start|stop|restart|status}"
         exit 1
         ;;
      esac
   exit $RETVAL
}
 
main $1
